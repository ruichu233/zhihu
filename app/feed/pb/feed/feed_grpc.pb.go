// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Feed_Ping_FullMethodName               = "/feed.Feed/Ping"
	Feed_GetFollowerFeed_FullMethodName    = "/feed.Feed/GetFollowerFeed"
	Feed_GetRecommendedFeed_FullMethodName = "/feed.Feed/GetRecommendedFeed"
	Feed_PublishContent_FullMethodName     = "/feed.Feed/PublishContent"
	Feed_Unfollow_FullMethodName           = "/feed.Feed/Unfollow"
)

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Feed 服务
type FeedClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 获取关注者的 Feed
	GetFollowerFeed(ctx context.Context, in *GetFollowerFeedRequest, opts ...grpc.CallOption) (*GetFollowerFeedResponse, error)
	// 获取个性化推荐 Feed
	GetRecommendedFeed(ctx context.Context, in *GetRecommendedFeedRequest, opts ...grpc.CallOption) (*GetRecommendedFeedResponse, error)
	// 当创作者发布新内容时，推送内容发布事件
	PublishContent(ctx context.Context, in *PublishContentRequest, opts ...grpc.CallOption) (*PublishContentResponse, error)
	// 取消关注
	Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Feed_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetFollowerFeed(ctx context.Context, in *GetFollowerFeedRequest, opts ...grpc.CallOption) (*GetFollowerFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowerFeedResponse)
	err := c.cc.Invoke(ctx, Feed_GetFollowerFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetRecommendedFeed(ctx context.Context, in *GetRecommendedFeedRequest, opts ...grpc.CallOption) (*GetRecommendedFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendedFeedResponse)
	err := c.cc.Invoke(ctx, Feed_GetRecommendedFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) PublishContent(ctx context.Context, in *PublishContentRequest, opts ...grpc.CallOption) (*PublishContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishContentResponse)
	err := c.cc.Invoke(ctx, Feed_PublishContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfollowResponse)
	err := c.cc.Invoke(ctx, Feed_Unfollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility.
//
// Feed 服务
type FeedServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 获取关注者的 Feed
	GetFollowerFeed(context.Context, *GetFollowerFeedRequest) (*GetFollowerFeedResponse, error)
	// 获取个性化推荐 Feed
	GetRecommendedFeed(context.Context, *GetRecommendedFeedRequest) (*GetRecommendedFeedResponse, error)
	// 当创作者发布新内容时，推送内容发布事件
	PublishContent(context.Context, *PublishContentRequest) (*PublishContentResponse, error)
	// 取消关注
	Unfollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedServer struct{}

func (UnimplementedFeedServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFeedServer) GetFollowerFeed(context.Context, *GetFollowerFeedRequest) (*GetFollowerFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerFeed not implemented")
}
func (UnimplementedFeedServer) GetRecommendedFeed(context.Context, *GetRecommendedFeedRequest) (*GetRecommendedFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedFeed not implemented")
}
func (UnimplementedFeedServer) PublishContent(context.Context, *PublishContentRequest) (*PublishContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishContent not implemented")
}
func (UnimplementedFeedServer) Unfollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}
func (UnimplementedFeedServer) testEmbeddedByValue()              {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	// If the following call pancis, it indicates UnimplementedFeedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetFollowerFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetFollowerFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_GetFollowerFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetFollowerFeed(ctx, req.(*GetFollowerFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetRecommendedFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetRecommendedFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_GetRecommendedFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetRecommendedFeed(ctx, req.(*GetRecommendedFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_PublishContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).PublishContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_PublishContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).PublishContent(ctx, req.(*PublishContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Unfollow(ctx, req.(*UnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Feed_Ping_Handler,
		},
		{
			MethodName: "GetFollowerFeed",
			Handler:    _Feed_GetFollowerFeed_Handler,
		},
		{
			MethodName: "GetRecommendedFeed",
			Handler:    _Feed_GetRecommendedFeed_Handler,
		},
		{
			MethodName: "PublishContent",
			Handler:    _Feed_PublishContent_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _Feed_Unfollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
