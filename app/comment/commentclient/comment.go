// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentclient

import (
	"context"

	"zhihu/app/comment/pb/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentInfo            = comment.CommentInfo
	DeleteCommentRequest   = comment.DeleteCommentRequest
	DeleteCommentResponse  = comment.DeleteCommentResponse
	GetCommentListRequest  = comment.GetCommentListRequest
	GetCommentListResponse = comment.GetCommentListResponse
	PublishCommentRequest  = comment.PublishCommentRequest
	PublishCommentResponse = comment.PublishCommentResponse
	Request                = comment.Request
	Response               = comment.Response

	Comment interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		// 获取评论列表
		GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error)
		// 发布评论
		PublishComment(ctx context.Context, in *PublishCommentRequest, opts ...grpc.CallOption) (*PublishCommentResponse, error)
		// 删除评论
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

func (m *defaultComment) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

// 获取评论列表
func (m *defaultComment) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetCommentList(ctx, in, opts...)
}

// 发布评论
func (m *defaultComment) PublishComment(ctx context.Context, in *PublishCommentRequest, opts ...grpc.CallOption) (*PublishCommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.PublishComment(ctx, in, opts...)
}

// 删除评论
func (m *defaultComment) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
