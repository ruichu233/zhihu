// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: like.proto

package like

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Like_Ping_FullMethodName              = "/like.Like/Ping"
	Like_LikeAction_FullMethodName        = "/like.Like/LikeAction"
	Like_CheckLikeStatus_FullMethodName   = "/like.Like/CheckLikeStatus"
	Like_GetPostLikeCount_FullMethodName  = "/like.Like/GetPostLikeCount"
	Like_GetUserLikes_FullMethodName      = "/like.Like/GetUserLikes"
	Like_GetPostLikers_FullMethodName     = "/like.Like/GetPostLikers"
	Like_GetUserTotalLikes_FullMethodName = "/like.Like/GetUserTotalLikes"
)

// LikeClient is the client API for Like service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 点赞/取消点赞
	LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error)
	// 查询是否对单obj点过赞
	CheckLikeStatus(ctx context.Context, in *CheckLikeStatusRequest, opts ...grpc.CallOption) (*CheckLikeStatusResponse, error)
	// 查询某个稿件的点赞数
	GetPostLikeCount(ctx context.Context, in *GetPostLikeCountRequest, opts ...grpc.CallOption) (*GetPostLikeCountResponse, error)
	// 查询某个用户的点赞列表
	GetUserLikes(ctx context.Context, in *GetUserLikesRequest, opts ...grpc.CallOption) (*GetUserLikesResponse, error)
	// 查询点赞人列表
	GetPostLikers(ctx context.Context, in *GetPostLikersRequest, opts ...grpc.CallOption) (*GetPostLikersResponse, error)
	// 查询用户收到的总点赞数
	GetUserTotalLikes(ctx context.Context, in *GetUserTotalLikesRequest, opts ...grpc.CallOption) (*GetUserTotalLikesResponse, error)
}

type likeClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeClient(cc grpc.ClientConnInterface) LikeClient {
	return &likeClient{cc}
}

func (c *likeClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Like_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeActionResponse)
	err := c.cc.Invoke(ctx, Like_LikeAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) CheckLikeStatus(ctx context.Context, in *CheckLikeStatusRequest, opts ...grpc.CallOption) (*CheckLikeStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckLikeStatusResponse)
	err := c.cc.Invoke(ctx, Like_CheckLikeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetPostLikeCount(ctx context.Context, in *GetPostLikeCountRequest, opts ...grpc.CallOption) (*GetPostLikeCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostLikeCountResponse)
	err := c.cc.Invoke(ctx, Like_GetPostLikeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetUserLikes(ctx context.Context, in *GetUserLikesRequest, opts ...grpc.CallOption) (*GetUserLikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLikesResponse)
	err := c.cc.Invoke(ctx, Like_GetUserLikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetPostLikers(ctx context.Context, in *GetPostLikersRequest, opts ...grpc.CallOption) (*GetPostLikersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostLikersResponse)
	err := c.cc.Invoke(ctx, Like_GetPostLikers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetUserTotalLikes(ctx context.Context, in *GetUserTotalLikesRequest, opts ...grpc.CallOption) (*GetUserTotalLikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTotalLikesResponse)
	err := c.cc.Invoke(ctx, Like_GetUserTotalLikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServer is the server API for Like service.
// All implementations must embed UnimplementedLikeServer
// for forward compatibility.
type LikeServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 点赞/取消点赞
	LikeAction(context.Context, *LikeActionRequest) (*LikeActionResponse, error)
	// 查询是否对单obj点过赞
	CheckLikeStatus(context.Context, *CheckLikeStatusRequest) (*CheckLikeStatusResponse, error)
	// 查询某个稿件的点赞数
	GetPostLikeCount(context.Context, *GetPostLikeCountRequest) (*GetPostLikeCountResponse, error)
	// 查询某个用户的点赞列表
	GetUserLikes(context.Context, *GetUserLikesRequest) (*GetUserLikesResponse, error)
	// 查询点赞人列表
	GetPostLikers(context.Context, *GetPostLikersRequest) (*GetPostLikersResponse, error)
	// 查询用户收到的总点赞数
	GetUserTotalLikes(context.Context, *GetUserTotalLikesRequest) (*GetUserTotalLikesResponse, error)
	mustEmbedUnimplementedLikeServer()
}

// UnimplementedLikeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLikeServer struct{}

func (UnimplementedLikeServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLikeServer) LikeAction(context.Context, *LikeActionRequest) (*LikeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAction not implemented")
}
func (UnimplementedLikeServer) CheckLikeStatus(context.Context, *CheckLikeStatusRequest) (*CheckLikeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLikeStatus not implemented")
}
func (UnimplementedLikeServer) GetPostLikeCount(context.Context, *GetPostLikeCountRequest) (*GetPostLikeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLikeCount not implemented")
}
func (UnimplementedLikeServer) GetUserLikes(context.Context, *GetUserLikesRequest) (*GetUserLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikes not implemented")
}
func (UnimplementedLikeServer) GetPostLikers(context.Context, *GetPostLikersRequest) (*GetPostLikersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLikers not implemented")
}
func (UnimplementedLikeServer) GetUserTotalLikes(context.Context, *GetUserTotalLikesRequest) (*GetUserTotalLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTotalLikes not implemented")
}
func (UnimplementedLikeServer) mustEmbedUnimplementedLikeServer() {}
func (UnimplementedLikeServer) testEmbeddedByValue()              {}

// UnsafeLikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServer will
// result in compilation errors.
type UnsafeLikeServer interface {
	mustEmbedUnimplementedLikeServer()
}

func RegisterLikeServer(s grpc.ServiceRegistrar, srv LikeServer) {
	// If the following call pancis, it indicates UnimplementedLikeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Like_ServiceDesc, srv)
}

func _Like_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_LikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).LikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_LikeAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).LikeAction(ctx, req.(*LikeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_CheckLikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLikeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).CheckLikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_CheckLikeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).CheckLikeStatus(ctx, req.(*CheckLikeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetPostLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostLikeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetPostLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_GetPostLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetPostLikeCount(ctx, req.(*GetPostLikeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetUserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetUserLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_GetUserLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetUserLikes(ctx, req.(*GetUserLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetPostLikers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostLikersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetPostLikers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_GetPostLikers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetPostLikers(ctx, req.(*GetPostLikersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetUserTotalLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTotalLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetUserTotalLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Like_GetUserTotalLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetUserTotalLikes(ctx, req.(*GetUserTotalLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Like_ServiceDesc is the grpc.ServiceDesc for Like service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Like_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "like.Like",
	HandlerType: (*LikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Like_Ping_Handler,
		},
		{
			MethodName: "LikeAction",
			Handler:    _Like_LikeAction_Handler,
		},
		{
			MethodName: "CheckLikeStatus",
			Handler:    _Like_CheckLikeStatus_Handler,
		},
		{
			MethodName: "GetPostLikeCount",
			Handler:    _Like_GetPostLikeCount_Handler,
		},
		{
			MethodName: "GetUserLikes",
			Handler:    _Like_GetUserLikes_Handler,
		},
		{
			MethodName: "GetPostLikers",
			Handler:    _Like_GetPostLikers_Handler,
		},
		{
			MethodName: "GetUserTotalLikes",
			Handler:    _Like_GetUserTotalLikes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "like.proto",
}
